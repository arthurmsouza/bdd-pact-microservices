buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
        jarName = "api-gateway-${version}.jar"
    }
    repositories {
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('io.spring.gradle:propdeps-plugin:0.0.9.RELEASE')
        classpath('com.bmuschko:gradle-docker-plugin:3.6.1')
    }
}

plugins {
    id "au.com.dius.pact" version "3.2.13"
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'
apply plugin: 'propdeps-eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-zuul')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile ('au.com.dius:pact-jvm-provider-spring_2.12:3.5.21')
    optional("org.springframework.boot:spring-boot-configuration-processor")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Finchley.SR1"
    }
}

pact {
    publish {
        pactDirectory = "$projectDir/build/pacts"
        pactBrokerUrl = 'http://localhost:1080'
    }
}

compileJava.dependsOn(processResources)

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

task copyFilesForDocker(type: Copy) {
    dependsOn build
    from project.file("build/libs/${jarName}")
    into project.file("build/docker/files")
}

def entryPointCommand = [
    "/usr/bin/java",
    "-jar",
    '-Dbdd-pact.ng-frontend.base-url=${NG_FRONTEND_URL}',
    '-Dbdd-pact.products-catalogue-service.base-url=${PRODUCTS_CATALOGUE_SERVICE_URL}',
    '-Dbdd-pact.offers-service.base-url=${OFFERS_SERVICE_URL}',
    "/opt/api-gateway/lib/api-gateway.jar"
]

task createDockerfile(type: Dockerfile) {
    dependsOn copyFilesForDocker
    destFile project.file('build/docker/Dockerfile')
    from("alpine:edge")
    maintainer "Javier Gil \"javier@gilpereda.com\""
    runCommand "apk add --no-cache openjdk8"
    environmentVariable('NG_FRONTEND_URL', 'http://ng-frontend')
    environmentVariable('PRODUCTS_CATALOGUE_SERVICE_URL', 'http://product-catalog-service:8080')
    environmentVariable('OFFERS_SERVICE_URL', 'http://offers-service:8080')
    copyFile("files/${jarName}", "/opt/api-gateway/lib/api-gateway.jar")
    entryPoint(*entryPointCommand)
    exposePort 8080
}

task buildDockerImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    dependsOn ':checkDockerIsAvailable'
    inputDir project.file('build/docker')
    tags = ['jagilpe/api-gateway:latest', "jagilpe/api-gateway:${version}".toString()]
}

processTestResources.dependsOn(":ng-frontend:pactPublish")

pactPublish.dependsOn check
pactPublish.dependsOn ':pactBrokerComposeUp'
